'use strict';

//var context = require('./context');
var utility = require('./utility');
var simulate = require('./simulate');

exports = module.exports;

var requests = new Array();

exports.queueSimulationRequest = function(request,res) {
    if(request.name && request.days)
    {
        if(request.days >= 1)
        {
            //  Do we have that simulation?
            for(var i = 0 ; i < simulations.length; i++) {
                if(request.name == simulations[i].name) 
                {
                    requests.push(request);
                    res(null,requests);
                    return;
                }
            }

            res("We do not have a simulation called " + 
                request.name + ".", requests);
        }
        else
        {
            res(request.name + " cannot be simulated for " + request.days + ". Year values must be above 0.", requests);
        }
    }
    else 
    {
        res("Bad or missing request data.",requests);
    }
};

exports.deleteSimulationRequestsForWorld = function(request,res) {
    
    for(var i = requests.length-1; i >= 0; --i) {
        var item = requests[i];
        // console.log(item);
        // console.log(request);

        if(item.name == request.name) {
            requests.splice(i, 1);
        }
    }
    res(null,requests);
};

exports.getSimulationRequests = function(res) {
    res(null,requests);
};

exports.clearSimulationRequests = function(res) {
    requests = new Array();
    res(null,requests);
};

function save(simulation)
{
    var date = "" + simulation.year +","+simulation.month + "," + simulation.day;
    simulation.dates.push({date:date,ctx: utility.cloneObject(simulation.ctx)});
};

exports.processSimulationRequests = function(res)
{
    for(var r = 0 ; r < requests.length; r++) 
    {
        for(var s = 0 ; s < simulations.length ; s++)
        {
            if(requests[r].name == simulations[s].name) 
            {

                //  Actually simulate this
                for(var d = 0 ; d < requests[r].days ; d++)
                {
                    simulations[s].day++;



                    if(simulations[s].day > 30)
                    {
                        simulations[s].day = 1;
                        simulations[s].month ++;
                        if(simulations[s].month > 12)
                        {
                            simulations[s].month = 1;
                            simulations[s].year++;

                            //  Yearly logic
                            //  Monthly logic
                            simulate.onYear(simulations[s].ctx,function(err,nothing)
                            {
                                if(err)
                                {
                                    res("Problem with crossing the year");
                                    return;
                                }
                            });
                        }

                        //  Monthly logic
                        simulate.onMonth(simulations[s].ctx,function(err,nothing)
                        {
                            if(err)
                            {
                                res("Problem with crossing the month");
                                return;
                            }
                        });
                    }

                    //  Weekly Logic
                    if(simulations[s].day % 10 == 0)
                    {
                        //  Save a copy of the game
                        
                    }

                    //  Daily logic
                    simulate.simulateDay(simulations[s].ctx,function(err,nothing)
                    {
                        if(err)
                        {
                            res("Problem wiht simulating a day");
                            return;
                        }
                        else
                        {
                            save(simulations[s]);
                        }

                    });
                    
                }
            }
        }
    }
    requests = new Array();
    res(null,requests);
};