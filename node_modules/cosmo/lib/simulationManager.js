'use strict';

exports = module.exports;

var context = require('./context');
var simulate = require('./simulate');

var simulations = new Array();

exports.createSimulation = function(req, res) 
{   
    var timeline = {
        name:req.name,
        year:1,month:1,day:1,
        dates:[],
        ctx: context.createContext(
            req.dimensions.columns, req.dimensions.rows,
            req.tilt, req.rotation,
            req.rules)
    };

    simulate.prepareSimulation(timeline.ctx,
        function(err)
        {
            if(err) { 
                res(err);
                return;
            }

            simulations.push(timeline);
            timeline.dates.push({date:"1,1,1",ctx: cloneObject(timeline.ctx)});
            res(null,simulations);
        });
};

exports.deleteSimulation = function(req,res) {
    for(var i = simulations.length-1; i >= 0; --i) {
        var item = simulations[i];

        if(item.name == req) {
            simulations.splice(i, 1);
        }
    }
    res(null,simulations);
};
exports.clearSimulations = function(res) {
    simulations= new Array();
    res(null,simulations);
};
exports.getSimulations = function(res) {
    res(null,simulations);
};
exports.getSimulationPackages = function(res) {
    var simulationPackages = new Array();
    for(var i = 0 ; i < simulations.length ; i++)
    {
        simulationPackages.push(
        {
            name: simulations[i].name,
            day: simulations[i].day,
            month: simulations[i].month,
            year: simulations[i].year,
            columns: simulations[i].ctx.columns,
            rows: simulations[i].ctx.rows,
            rules: simulations[i].ctx.rules
        });
    }

    res(null,simulationPackages);
};

function getSimulation (req,res)
{
    for(var s = 0 ; s < simulations.length;s++)
    {
        //console.log(simulations[s].name + " equals " + req + "?");
        if(simulations[s].name == req)
        {
            res(null, simulations[s]);
            return;
        }
    }
    res("Cannot find simulation named " + req.name + ".");
}

exports.getSimulationTimeline = function(req,res) {
    
    getSimulation(req,function(err,simulation) {
        
        if(err) { 
            res(err);
            return;
        }
        var timeline = new Array();
        for(var v = simulation.dates.length-1; v >=0; v--)
        {
            timeline.push(simulation.dates[v].date);
        }
        res(null, timeline);
          
    });
};

exports.getSimulationPackage = function(req,res) {

    // console.log("Get simulation package");
    // console.log(req);

    getSimulation(req,function(err,simulation) {
        
        if(err) { 
            res(err);
            return;
        }
        res(null, {
            name: simulation.name,
            day: simulation.day,
            month: simulation.month,
            year: simulation.year,
            columns: simulation.ctx.columns,
            rows: simulation.ctx.rows
        });
          
    });
};




