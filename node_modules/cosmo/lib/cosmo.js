'use strict';

//var context = require('./context');
var utility = require('./utility');
var context = require('./context');
var simulate = require('./simulate');
var renderer = require('./renderer');
exports = module.exports;

var requests = new Array();
var simulations = new Array();

exports.createSimulation = function(req, res) 
{   
    var timeline = {
        name:req.name,
        year:1,month:1,day:1,
        dates:[],
        ctx: context.createContext(
            req.dimensions.columns, req.dimensions.rows,
            req.tilt, req.rotation,
            req.rules)
    };
    simulate.prepareSimulation(timeline.ctx,
        function(err)
        {
            if(err) { 
                res(err);
                return;
            }

            simulations.push(timeline);
            res(null,simulations);
        });
};

function cloneObject(obj) {
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }
 
    var temp = obj.constructor(); // give temp the original obj's constructor
    for (var key in obj) {
        temp[key] = cloneObject(obj[key]);
    }
 
    return temp;
}

exports.deleteSimulation = function(req,res) {
    for(var i = simulations.length-1; i >= 0; --i) {
        var item = simulations[i];

        if(item.name == req) {
            simulations.splice(i, 1);
        }
    }
    res(null,simulations);
};
exports.clearSimulations = function(res) {
    simulations= new Array();
    res(null,simulations);
};
exports.getSimulations = function(res) {
    res(null,simulations);
};
exports.getSimulationPackages = function(res) {
    var simulationPackages = new Array();
    for(var i = 0 ; i < simulations.length ; i++)
    {
        simulationPackages.push(
        {
            name: simulations[i].name,
            day: simulations[i].day,
            month: simulations[i].month,
            year: simulations[i].year,
            columns:simulations[i].ctx.columns,
            rows:simulations[i].ctx.rows
        });
    }

    res(null,simulationPackages);
};

function getSimulation (req,res)
{
    for(var s = 0 ; s < simulations.length;s++)
    {
        //console.log(simulations[s].name + " equals " + req + "?");
        if(simulations[s].name == req)
        {
            res(null, simulations[s]);
            return;
        }
    }
    res("Cannot find simulation named " + req.name + ".");
}

exports.getSimulationPackage = function(req,res) {

    // console.log("Get simulation package");
    // console.log(req);

    getSimulation(req,function(err,simulation) {
        
        if(err) { 
            res(err);
            return;
        }
        res(null, {
            name: simulation.name,
            day: simulation.day,
            month: simulation.month,
            year: simulation.year,
            columns: simulation.ctx.columns,
            rows: simulation.ctx.rows
        });
          
    });
};

exports.renderSimulation=function(req,res)
{
    // console.log("Render simulation");
    // console.log(req.name);
    
    getSimulation(req.name,function(err,simulation) {
        
        if(err) {
            res(err);
            return;
        }
        renderer.render(
            {
                ctx: simulation.ctx,
                mode: req.mode
            },
            function(err,colors)
            {
                if(err) {
                    res(err);
                    return;
                }

                res(null,colors);
            }
        );
    });
};

exports.queueSimulationRequest = function(request,res) {
    if(request.name && request.days)
    {
        if(request.days >= 1)
        {
            //  Do we have that simulation?
            for(var i = 0 ; i < simulations.length; i++) {
                if(request.name == simulations[i].name) 
                {
                    requests.push(request);
                    res(null,requests);
                    return;
                }
            }

            res("We do not have a simulation called " + 
                request.name + ".", requests);
        }
        else
        {
            res(request.name + " cannot be simulated for " + request.days + ". Year values must be above 0.", requests);
        }
    }
    else 
    {
        res("Bad or missing request data.",requests);
    }
};

exports.deleteSimulationRequestsForWorld = function(request,res) {
    
    for(var i = requests.length-1; i >= 0; --i) {
        var item = requests[i];
        // console.log(item);
        // console.log(request);

        if(item.name == request.name) {
            requests.splice(i, 1);
        }
    }
    res(null,requests);
};

exports.getSimulationRequests = function(res) {
    res(null,requests);
};

exports.clearSimulationRequests = function(res) {
    requests = new Array();
    res(null,requests);
};
exports.processSimulationRequests = function(res)
{
    for(var r = 0 ; r < requests.length; r++) 
    {
        for(var s = 0 ; s < simulations.length ; s++)
        {
            if(requests[r].name == simulations[s].name) 
            {
                //  Actually simulate this
                for(var d = 0 ; d < requests[r].days ; d++)
                {
                    //  Daily computation

                    simulations[s].day++;

                    if(simulations[s].day > 30)
                    {
                        //  Monthly logic

                        simulations[s].day = 1;
                        simulations[s].month ++;
                        if(simulations[s].month > 12)
                        {
                            //  Yearly logic

                            simulations[s].month = 1;
                            simulations[s].year++;
                        }
                    }

                }
            }
        }
    }
    requests = new Array();
    res(null,requests);
};


