'use strict';

//var context = require('./context');
var utility = require('./utility');
var context = require('./context');
var simulate = require('./simulate');
exports = module.exports;

var requests = new Array();
var simulations = new Array();

exports.queueSimulationRequest = function(request,res) {
    if(request.name && request.years)
    {
        if(request.years >= 1 && request.years <= 100 )
        {
            //  Do we have that simulation?
            for(var i = 0 ; i < simulations.length; i++) {
                if(request.name == simulations[i].name) 
                {
                    requests.push(request);
                    res(null,requests);
                    return;
                }
            }

            res("We do not have a simulation called " + 
                request.name + ".", requests);
        }
        else
        {
            res(request.name + " cannot be simulated for " + request.years + ". Year values must be between 1 and 100 inclusive.", requests);
        }
    }
    else 
    {
        res("Bad or missing request data.",requests);
    }
};

exports.deleteSimulationRequestsForWorld = function(request,res) {
    
    for(var i = requests.length-1; i >= 0; --i) {
        var item = requests[i];
        console.log(item);
        console.log(request);

        if(item.name == request.name) {
            requests.splice(i, 1);
        }
    }
    res(null,requests);
};

exports.getSimulationRequests = function(res) {
    res(null,requests);
};

exports.clearSimulationRequests = function(res) {
    requests = new Array();
    res(null,requests);
};
exports.processSimulationRequests = function(res)
{
    for(var r = 0 ; r < requests.length; r++) 
    {
        for(var s = 0 ; s < simulations.length ; s++)
        {
            if(requests[r].name == simulations[s].name) 
            {
                //  Actually simulate this


                //console.log("" + simulations[s].year+"+"+requests[r].years);
                simulations[s].year += requests[r].years;
            }
        }
    }
    requests = new Array();
    res(null,
        {
            requests:requests,
            simulations:simulations
        });
};

exports.createSimulation = function(req, res) {
    var newSimulation = context.createContext(req.name, 100, 180, 0.5, 0);
    
    simulate.prepareSimulation(newSimulation);

    simulations.push(newSimulation);
    res(null,simulations);
};

exports.deleteSimulation = function(req,res) {
    for(var i = simulations.length-1; i >= 0; --i) {
        var item = simulations[i];

        if(item.name == req) {
            simulations.splice(i, 1);
        }
    }
    res(null,simulations);
};
exports.clearSimulations = function(res) {
    simulations= new Array();
    res(null,simulations);
};
exports.getSimulations = function(res) {
    res(null,simulations);
};

exports.getSimulationPackage = function(req,res) {
    // do we have the name? 
    for(var s = 0 ; s < simulations.length;s++)
    {
        console.log("Does " + simulations[s].name + " equal " + req + "?");
        if(simulations[s].name == req)
        {
            res(null, {
                name:simulations[s].name,
                columns:simulations[s].columns,
                rows:simulations[s].rows
            });
        }        
    }
    res("Cannot find simulation named " + req.name + ".");
};

